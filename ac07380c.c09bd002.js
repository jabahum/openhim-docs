(window.webpackJsonp=window.webpackJsonp||[]).push([[148],{231:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));n(0);var o=n(302);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}const a={id:"docker",title:"Install via Docker",sidebar_label:"Install via Docker"},l=[],i={rightToc:l},c="wrapper";function s({components:e,...t}){return Object(o.b)(c,r({},i,t,{components:e,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The following steps will guide you through the process of installing the OpenHIM using docker images."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Install ",Object(o.b)("strong",{parentName:"li"},"Docker")," via terminal ",Object(o.b)("inlineCode",{parentName:"li"},"curl https://get.docker.com/ | sh -")," Or install Docker using the link below, follow all the steps and most importantly, ensure that there is no previous docker installed while following these instructions. (",Object(o.b)("a",r({parentName:"li"},{href:"https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/#install-using-the-repository"}),"https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/#install-using-the-repository"),")"),Object(o.b)("li",{parentName:"ol"},"Install ",Object(o.b)("strong",{parentName:"li"},"Docker Compose"),", follow all the steps and use the recommend example version to install which is their latest stable release: ",Object(o.b)("a",r({parentName:"li"},{href:"https://docs.docker.com/compose/install/#install-compose"}),"https://docs.docker.com/compose/install/#install-compose")),Object(o.b)("li",{parentName:"ol"},"Install Git ",Object(o.b)("inlineCode",{parentName:"li"},"sudo apt-get install git")),Object(o.b)("li",{parentName:"ol"},"Clone the repository for setting up a docker image ",Object(o.b)("inlineCode",{parentName:"li"},"git clone https://github.com/jembi/openhim-common.git")),Object(o.b)("li",{parentName:"ol"},"Navigate into the repo ",Object(o.b)("inlineCode",{parentName:"li"},"cd openhim-common")),Object(o.b)("li",{parentName:"ol"},"Build the docker images ",Object(o.b)("inlineCode",{parentName:"li"},"docker-compose build && docker-compose up -d")),Object(o.b)("li",{parentName:"ol"},"Access the OpenHIM Console on ",Object(o.b)("a",r({parentName:"li"},{href:"http://localhost:9000"}),"http://localhost:9000"))),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note"),": To configure the IP address the user must do the following ",Object(o.b)("inlineCode",{parentName:"p"},"sudo nano default.json")," edit the hostname to be that of the IP address of the docker image.")))}s.isMDXComponent=!0},302:function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return u}));var o=n(0),r=n.n(o),a=r.a.createContext({}),l=function(e){var t=r.a.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},i=function(e){var t=l(e.components);return r.a.createElement(a.Provider,{value:t},e.children)};var c="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=Object(o.forwardRef)((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=function(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&-1===t.indexOf(o)&&(n[o]=e[o]);return n}(e,["components","mdxType","originalType","parentName"]),p=l(n),u=o,m=p[i+"."+u]||p[u]||s[u]||a;return n?r.a.createElement(m,Object.assign({},{ref:t},c,{components:n})):r.a.createElement(m,Object.assign({},{ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:o,l[1]=i;for(var u=2;u<a;u++)l[u]=n[u];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);