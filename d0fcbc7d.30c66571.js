(window.webpackJsonp=window.webpackJsonp||[]).push([[411],{505:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return l}));var a=n(1),r=n(6),s=(n(0),n(597)),i={id:"restful-api",title:"RESTful API",sidebar_label:"RESTful API"},c=[{value:"Tasks resource",id:"tasks-resource",children:[]}],o={rightToc:c},b="wrapper";function l(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(s.b)(b,Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("h3",{id:"tasks-resource"},"Tasks resource"),Object(s.b)("p",null,"Tasks are used to submit transactions to be re-run."),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"https://<server>:<api_port>/tasks")),Object(s.b)("h4",{id:"fetch-all-tasks"},"Fetch all tasks"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"GET /tasks")),Object(s.b)("p",null,"The response status code will be ",Object(s.b)("inlineCode",{parentName:"p"},"200")," if successful and the response body will contain an array of task objects. See the ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/jembi/openhim-core-js/blob/master/src/model/tasks.js"}),"tasks schema"),"."),Object(s.b)("h4",{id:"add-a-task"},"Add a task"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"POST /tasks")),Object(s.b)("p",null,"with a json body representing the task to be added in the following format:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "tids": [\n    "id#1",\n    "id#2",\n    ...\n    "id#N"\n  ],\n  "batchSize": 4,   //optional\n  "paused": true    //optional\n}\n')),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"tids")," field should contain an array of transaction identifiers indicating the transactions that need to be rerun. The ",Object(s.b)("inlineCode",{parentName:"p"},"batchSize")," field indicates the number of transactions that the core should run concurrently. To prevent a task from immediately starting upon add, the ",Object(s.b)("inlineCode",{parentName:"p"},"paused")," field can be added. In this case the task will simply be scheduled with a ",Object(s.b)("inlineCode",{parentName:"p"},"Paused")," status, ready to be started at any later stage."),Object(s.b)("p",null,"The response code will be ",Object(s.b)("inlineCode",{parentName:"p"},"201")," if successful."),Object(s.b)("h4",{id:"fetch-a-specific-task"},"Fetch a specific task"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"GET /tasks/:taskId")),Object(s.b)("p",null,"where ",Object(s.b)("inlineCode",{parentName:"p"},":taskId")," is the ",Object(s.b)("inlineCode",{parentName:"p"},"_id")," property of the task to fetch."),Object(s.b)("p",null,"The response status code will be ",Object(s.b)("inlineCode",{parentName:"p"},"200")," if successful and the response body will contain a task object. See the ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/jembi/openhim-core-js/blob/master/src/model/tasks.js"}),"task schema"),"."),Object(s.b)("h4",{id:"update-a-task"},"Update a task"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"PUT /tasks/:taskId")),Object(s.b)("p",null,"where ",Object(s.b)("inlineCode",{parentName:"p"},":taskId")," is the ",Object(s.b)("inlineCode",{parentName:"p"},"_id")," property of the task to update."),Object(s.b)("p",null,"Tasks can be paused, resumed or cancelled by sending through an update with status equal to ",Object(s.b)("inlineCode",{parentName:"p"},"Paused"),", ",Object(s.b)("inlineCode",{parentName:"p"},"Queued")," or ",Object(s.b)("inlineCode",{parentName:"p"},"Cancelled")," respectively."),Object(s.b)("p",null,"The response code will be ",Object(s.b)("inlineCode",{parentName:"p"},"200")," if successful."),Object(s.b)("h4",{id:"delete-a-task"},"Delete a task"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"DELETE /tasks/:taskId")),Object(s.b)("p",null,"where ",Object(s.b)("inlineCode",{parentName:"p"},":taskId")," is the ",Object(s.b)("inlineCode",{parentName:"p"},"_id")," property of the task to delete."),Object(s.b)("p",null,"The response code will be ",Object(s.b)("inlineCode",{parentName:"p"},"200")," if successful."))}l.isMDXComponent=!0},597:function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return p}));var a=n(0),r=n.n(a),s=r.a.createContext({}),i=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},c=function(e){var t=i(e.components);return r.a.createElement(s.Provider,{value:t},e.children)};var o="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},l=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,o=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}(e,["components","mdxType","originalType","parentName"]),l=i(n),p=a,d=l[c+"."+p]||l[p]||b[p]||s;return n?r.a.createElement(d,Object.assign({},{ref:t},o,{components:n})):r.a.createElement(d,Object.assign({},{ref:t},o))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=l;var c={};for(var b in t)hasOwnProperty.call(t,b)&&(c[b]=t[b]);c.originalType=e,c[o]="string"==typeof e?e:a,i[1]=c;for(var p=2;p<s;p++)i[p]=n[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}l.displayName="MDXCreateElement"}}]);