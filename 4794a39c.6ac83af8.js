(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{153:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return u}));n(0);var a=n(302);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}const o={id:"auditing",title:"Auditing",sidebar_label:"Auditing"},i=[{value:"ATNA Audit Repository",id:"atna-audit-repository",children:[]},{value:"ATNA Audit Events",id:"atna-audit-events",children:[]}],p={rightToc:i},c="wrapper";function u({components:e,...t}){return Object(a.b)(c,r({},p,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"atna-audit-repository"},"ATNA Audit Repository"),Object(a.b)("p",null,"The OpenHIM provides full support as an Audit Repository actor in the ",Object(a.b)("a",r({parentName:"p"},{href:"http://wiki.ihe.net/index.php?title=Audit_Trail_and_Node_Authentication"}),"IHE ATNA profile"),"."),Object(a.b)("p",null,"You can make use of this functionality by enabling any of the audit servers in ",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/jembi/openhim-core-js/blob/master/config/default.json#L111-L125"}),"config")," before starting up the OpenHIM-core:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-json"}),'"auditing": {\n  "servers": {\n    "udp": {\n      "enabled": true,\n      "port": 5050\n    },\n    "tls": {\n      "enabled": true,\n      "port": 5051\n    },\n    "tcp": {\n      "enabled": true,\n      "port": 5052\n    }\n  },\n  ...\n}\n')),Object(a.b)("p",null,"The OpenHIM supports both RFC3881 and DICOM formatted audit events."),Object(a.b)("p",null,"The OpenHIM-console has an audit viewer available on the 'Audit Log' page."),Object(a.b)("h2",{id:"atna-audit-events"},"ATNA Audit Events"),Object(a.b)("p",null,"The OpenHIM will generate audit events on application start/stop, as well as user authentication. These events can either be sent to the OpenHIM's own internal audit repository, or to an external repository. This can be setup in ",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/jembi/openhim-core-js/blob/master/config/default.json#L111-L116"}),"config")," by choosing an appropriate ",Object(a.b)("inlineCode",{parentName:"p"},"interface"),":"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-json"}),'"auditEvents": {\n  "interface": "tls",\n  "host": "192.168.1.11",\n  "port": 8888\n}\n')),Object(a.b)("p",null,"Options for the interface are: ",Object(a.b)("inlineCode",{parentName:"p"},"internal"),", ",Object(a.b)("inlineCode",{parentName:"p"},"udp"),", ",Object(a.b)("inlineCode",{parentName:"p"},"tls")," and ",Object(a.b)("inlineCode",{parentName:"p"},"tcp"),". The host and port does not need to be set for the ",Object(a.b)("inlineCode",{parentName:"p"},"internal")," interface."),Object(a.b)("p",null,"Note that audit events are generated in RFC3881 format, but see our ",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/jembi/openhim-mediator-RFC3881toDICOM"}),"RFC3881 to DICOM Mediator")," for converting to DICOM."))}u.isMDXComponent=!0},302:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return l}));var a=n(0),r=n.n(a),o=r.a.createContext({}),i=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},p=function(e){var t=i(e.components);return r.a.createElement(o.Provider,{value:t},e.children)};var c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},s=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}(e,["components","mdxType","originalType","parentName"]),s=i(n),l=a,b=s[p+"."+l]||s[l]||u[l]||o;return n?r.a.createElement(b,Object.assign({},{ref:t},c,{components:n})):r.a.createElement(b,Object.assign({},{ref:t},c))}));function l(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=s;var p={};for(var u in t)hasOwnProperty.call(t,u)&&(p[u]=t[u]);p.originalType=e,p[c]="string"==typeof e?e:a,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);