(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{170:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return c}));n(0);var o=n(302);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}const r={id:"manually-install-on-ubuntu-trusty",title:"Manually install on Ubuntu 14.04 Trusty",sidebar_label:"Manually install on Ubuntu 14.04 Trusty"},i=[{value:"Install Node.js",id:"install-nodejs",children:[]},{value:"Install MongoDB 3.0",id:"install-mongodb-30",children:[]},{value:"(optional) SSH User Fix - needed to use mongo client",id:"optional-ssh-user-fix---needed-to-use-mongo-client",children:[]},{value:"Other prerequisites",id:"other-prerequisites",children:[]},{value:"OpenHIM Core",id:"openhim-core",children:[{value:"Configuration",id:"configuration",children:[]},{value:"Setup the HIM core as a service",id:"setup-the-him-core-as-a-service",children:[]},{value:"Run and verify",id:"run-and-verify",children:[]}]},{value:"OpenHIM Console",id:"openhim-console",children:[]},{value:"Fin",id:"fin",children:[]}],l={rightToc:i},s="wrapper";function c({components:e,...t}){return Object(o.b)(s,a({},l,t,{components:e,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The following is a quick start tutorial to help guide you through the steps required for a new OpenHIM installation on a clean Ubuntu 14.04 instance."),Object(o.b)("p",null,"This quickest an easiest way to install the OpenHIM on ubuntu is to use our deb package. This will install both he OpenHIM core and console on your server. See details on how to do this ",Object(o.b)("a",a({parentName:"p"},{href:"../getting-started.html"}),"here"),"."),Object(o.b)("p",null,"If you would like to install the OpenHIM manually, read on."),Object(o.b)("h2",{id:"install-nodejs"},"Install Node.js"),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"As per ",Object(o.b)("a",a({parentName:"em"},{href:"https://nodesource.com/blog/nodejs-v012-iojs-and-the-nodesource-linux-repositories"}),"https://nodesource.com/blog/nodejs-v012-iojs-and-the-nodesource-linux-repositories"))," The first required dependency is Node.js. You should at least be running version 4. We can use NVM to get the latest node versions."),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-sh"}),"wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash\n\nnvm install --lts\n")),Object(o.b)("h2",{id:"install-mongodb-30"},"Install MongoDB 3.0"),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"As per ",Object(o.b)("a",a({parentName:"em"},{href:"http://docs.mongodb.org/master/tutorial/install-mongodb-on-ubuntu"}),"http://docs.mongodb.org/master/tutorial/install-mongodb-on-ubuntu"))," Next we need to setup MongoDB. At a minimum version 2.6 is required, but let's get version 3.0:"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-sh"}),'sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\necho "deb http://repo.mongodb.org/apt/ubuntu "$(lsb_release -sc)"/mongodb-org/3.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list\nsudo apt-get update\nsudo apt-get install mongodb-org\n')),Object(o.b)("h2",{id:"optional-ssh-user-fix---needed-to-use-mongo-client"},"(optional) SSH User Fix - needed to use mongo client"),Object(o.b)("p",null,"You may run into an issue when trying to run the mongo command from the commandline via an SSH session:"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-sh"}),"jembi@openhim:~$ mongo\nFailed global initialization: BadValue Invalid or no user locale set. Please ensure LANG and/or LC_* environment variables are set correctly.\n")),Object(o.b)("p",null,"This can be fixed as follows: Use your favourite text editor to open up ",Object(o.b)("inlineCode",{parentName:"p"},"/etc/default/locale")," and add the following line:"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},'LC_ALL="en_US.UTF-8"')),Object(o.b)("p",null,"or use whichever locale is appropriate. Now log out and back in from your SSH session."),Object(o.b)("h2",{id:"other-prerequisites"},"Other prerequisites"),Object(o.b)("p",null,"Just some final dependencies before we move onto the HIM installation itself:"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"sudo apt-get install git build-essential")),Object(o.b)("h2",{id:"openhim-core"},"OpenHIM Core"),Object(o.b)("p",null,"Now that all our dependencies are in place, let's proceed with installing the OpenHIM Core component:"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"sudo npm install -g openhim-core")),Object(o.b)("p",null,"This will download and install the latest version of core. Next we'll setup the configuration and an Ubuntu service."),Object(o.b)("h3",{id:"configuration"},"Configuration"),Object(o.b)("p",null,"Download a copy of the default core config and place it in ",Object(o.b)("em",{parentName:"p"},"/etc"),":"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-sh"}),"wget https://raw.githubusercontent.com/jembi/openhim-core-js/master/config/default.json\nsudo mkdir /etc/openhim\nsudo mv default.json /etc/openhim/core.json\n")),Object(o.b)("p",null,"You can now edit ",Object(o.b)("inlineCode",{parentName:"p"},"/etc/openhim/core.json")," and configure it as required for your instance."),Object(o.b)("h3",{id:"setup-the-him-core-as-a-service"},"Setup the HIM core as a service"),Object(o.b)("p",null,"Download a copy of our default service configuration:"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-sh"}),"wget https://raw.githubusercontent.com/jembi/openhim-core-js/master/resources/openhim-core.conf\nsudo mv openhim-core.conf /etc/init/\n")),Object(o.b)("p",null,"Next edit ",Object(o.b)("inlineCode",{parentName:"p"},"/etc/init/openhim-core.conf")," and edit the startup line to look as follows:"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-sh"}),"NODE_ENV=production openhim-core --conf=/etc/openhim/core.json --cluster=auto >> /var/log/openhim-core.log 2>&1\n")),Object(o.b)("p",null,"Here we're just setting up the startup command to use the configuration in /etc/openhim, as well as enabling automatic clustering; which will take advantage of your available CPU cores."),Object(o.b)("h3",{id:"run-and-verify"},"Run and verify"),Object(o.b)("p",null,"Now we're ready to startup the HIM Core:"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"sudo service openhim-core start")),Object(o.b)("p",null,"You can verify and monitor the instance by looking at the logs:"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"tail -f /var/log/openhim-core.log")),Object(o.b)("h2",{id:"openhim-console"},"OpenHIM Console"),Object(o.b)("p",null,"Next we need to setup the OpenHIM Console. Download the latest release from ",Object(o.b)("a",a({parentName:"p"},{href:"https://github.com/jembi/openhim-console/releases/latest"}),"https://github.com/jembi/openhim-console/releases/latest"),", e.g.:"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"wget https://github.com/jembi/openhim-console/releases/download/v1.2.0/openhim-console-v1.2.0.tar.gz")),Object(o.b)("p",null,"In this example we downloaded version 1.2.0, but it's a good idea to get the latest that is available. Next we need a web server to host the console; for this tutorial we'll use Nginx:"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"sudo apt-get install nginx")),Object(o.b)("p",null,"Now deploy the console:"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-sh"}),"cd /usr/share/nginx/html/\nsudo tar -zxf ~/openhim-console-v1.2.0.tar.gz\n")),Object(o.b)("p",null,"Next we need to edit ",Object(o.b)("inlineCode",{parentName:"p"},"/usr/share/nginx/html/config/default.json"),' and configure for the HIM core server. Simply set the host and port values to point to the address that the HIM core API will be available from. Note this host needs to be publicly accessible, e.g. the server\'s domain name or public IP address. When a client uses the HIM console, requests to the core API will be made "client-side" and not from the server. Now we can startup Nginx and start using the HIM:'),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"sudo service nginx start")),Object(o.b)("h2",{id:"fin"},"Fin"),Object(o.b)("p",null,"The OpenHIM Core and Console should now be up and running! Access the console on ",Object(o.b)("a",a({parentName:"p"},{href:"http://yourserver"}),"http://yourserver")," and login with ",Object(o.b)("strong",{parentName:"p"},"root@openhim.org")," using the password: ",Object(o.b)("strong",{parentName:"p"},"openhim-password")," If there's a login issue, try accepting the self-signed cert in your browser on: ",Object(o.b)("a",a({parentName:"p"},{href:"https://yourserver:8080/authenticate/root@openhim.org"}),"https://yourserver:8080/authenticate/root@openhim.org")))}c.isMDXComponent=!0},302:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return p}));var o=n(0),a=n.n(o),r=a.a.createContext({}),i=function(e){var t=a.a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},l=function(e){var t=i(e.components);return a.a.createElement(r.Provider,{value:t},e.children)};var s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=Object(o.forwardRef)((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,s=function(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&-1===t.indexOf(o)&&(n[o]=e[o]);return n}(e,["components","mdxType","originalType","parentName"]),u=i(n),p=o,b=u[l+"."+p]||u[p]||c[p]||r;return n?a.a.createElement(b,Object.assign({},{ref:t},s,{components:n})):a.a.createElement(b,Object.assign({},{ref:t},s))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[s]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);